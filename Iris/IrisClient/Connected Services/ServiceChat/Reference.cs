//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IrisClient.ServiceChat {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceChat.IServiceChat")]
    public interface IServiceChat {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/Connect")]
        void Connect(IrisLib.User user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/Connect")]
        System.Threading.Tasks.Task ConnectAsync(IrisLib.User user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/Disconnect")]
        void Disconnect(IrisLib.User user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/Disconnect")]
        System.Threading.Tasks.Task DisconnectAsync(IrisLib.User user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/SendDatabaseToClients")]
        void SendDatabaseToClients();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/SendDatabaseToClients")]
        System.Threading.Tasks.Task SendDatabaseToClientsAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/GetMessageFromClient")]
        void GetMessageFromClient(IrisLib.User sender, string messageText, int chatID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/GetMessageFromClient")]
        System.Threading.Tasks.Task GetMessageFromClientAsync(IrisLib.User sender, string messageText, int chatID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GetNewUser", ReplyAction="http://tempuri.org/IServiceChat/GetNewUserResponse")]
        int GetNewUser(IrisLib.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GetNewUser", ReplyAction="http://tempuri.org/IServiceChat/GetNewUserResponse")]
        System.Threading.Tasks.Task<int> GetNewUserAsync(IrisLib.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/SendDatabaseFirstTime", ReplyAction="http://tempuri.org/IServiceChat/SendDatabaseFirstTimeResponse")]
        IrisLib.Database SendDatabaseFirstTime();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/SendDatabaseFirstTime", ReplyAction="http://tempuri.org/IServiceChat/SendDatabaseFirstTimeResponse")]
        System.Threading.Tasks.Task<IrisLib.Database> SendDatabaseFirstTimeAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/AddUserToChat")]
        void AddUserToChat(IrisLib.User sender, IrisLib.User user, int chatID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/AddUserToChat")]
        System.Threading.Tasks.Task AddUserToChatAsync(IrisLib.User sender, IrisLib.User user, int chatID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/CreateNewChat")]
        void CreateNewChat(IrisLib.User sender, IrisLib.Chat chat);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/CreateNewChat")]
        System.Threading.Tasks.Task CreateNewChatAsync(IrisLib.User sender, IrisLib.Chat chat);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/ChangePassword")]
        void ChangePassword(IrisLib.User user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/ChangePassword")]
        System.Threading.Tasks.Task ChangePasswordAsync(IrisLib.User user);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChatChannel : IrisClient.ServiceChat.IServiceChat, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceChatClient : System.ServiceModel.ClientBase<IrisClient.ServiceChat.IServiceChat>, IrisClient.ServiceChat.IServiceChat {
        
        public ServiceChatClient() {
        }
        
        public ServiceChatClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceChatClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceChatClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceChatClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Connect(IrisLib.User user) {
            base.Channel.Connect(user);
        }
        
        public System.Threading.Tasks.Task ConnectAsync(IrisLib.User user) {
            return base.Channel.ConnectAsync(user);
        }
        
        public void Disconnect(IrisLib.User user) {
            base.Channel.Disconnect(user);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(IrisLib.User user) {
            return base.Channel.DisconnectAsync(user);
        }
        
        public void SendDatabaseToClients() {
            base.Channel.SendDatabaseToClients();
        }
        
        public System.Threading.Tasks.Task SendDatabaseToClientsAsync() {
            return base.Channel.SendDatabaseToClientsAsync();
        }
        
        public void GetMessageFromClient(IrisLib.User sender, string messageText, int chatID) {
            base.Channel.GetMessageFromClient(sender, messageText, chatID);
        }
        
        public System.Threading.Tasks.Task GetMessageFromClientAsync(IrisLib.User sender, string messageText, int chatID) {
            return base.Channel.GetMessageFromClientAsync(sender, messageText, chatID);
        }
        
        public int GetNewUser(IrisLib.User user) {
            return base.Channel.GetNewUser(user);
        }
        
        public System.Threading.Tasks.Task<int> GetNewUserAsync(IrisLib.User user) {
            return base.Channel.GetNewUserAsync(user);
        }
        
        public IrisLib.Database SendDatabaseFirstTime() {
            return base.Channel.SendDatabaseFirstTime();
        }
        
        public System.Threading.Tasks.Task<IrisLib.Database> SendDatabaseFirstTimeAsync() {
            return base.Channel.SendDatabaseFirstTimeAsync();
        }
        
        public void AddUserToChat(IrisLib.User sender, IrisLib.User user, int chatID) {
            base.Channel.AddUserToChat(sender, user, chatID);
        }
        
        public System.Threading.Tasks.Task AddUserToChatAsync(IrisLib.User sender, IrisLib.User user, int chatID) {
            return base.Channel.AddUserToChatAsync(sender, user, chatID);
        }
        
        public void CreateNewChat(IrisLib.User sender, IrisLib.Chat chat) {
            base.Channel.CreateNewChat(sender, chat);
        }
        
        public System.Threading.Tasks.Task CreateNewChatAsync(IrisLib.User sender, IrisLib.Chat chat) {
            return base.Channel.CreateNewChatAsync(sender, chat);
        }
        
        public void ChangePassword(IrisLib.User user) {
            base.Channel.ChangePassword(user);
        }
        
        public System.Threading.Tasks.Task ChangePasswordAsync(IrisLib.User user) {
            return base.Channel.ChangePasswordAsync(user);
        }
    }
}
